# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ask_Task.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5.QtWidgets import*
from PyQt5.QtSql import*
from PyQt5.QtCore import Qt, QDate
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtSql import*
from PyQt5.QtWidgets import QMessageBox
from datetime import datetime
from PIL import Image



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 913)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 800, 913))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(0, 0, 800, 913))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("1.png"))
        self.label.setObjectName("label")
        self.Registration_Page_pushButton = QtWidgets.QPushButton(self.page)
        self.Registration_Page_pushButton.setGeometry(QtCore.QRect(90, 620, 641, 91))
        self.Registration_Page_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Registration_Page_pushButton.setText("")
        self.Registration_Page_pushButton.setObjectName("Registration_Page_pushButton")
        self.Registration_Page_pushButton.clicked.connect(self.click_0_1)
        self.Entry_Page_pushButton = QtWidgets.QPushButton(self.page)
        self.Entry_Page_pushButton.setGeometry(QtCore.QRect(90, 760, 641, 91))
        self.Entry_Page_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Entry_Page_pushButton.setText("")
        self.Entry_Page_pushButton.setObjectName("Entry_Page_pushButton")
        self.Entry_Page_pushButton.clicked.connect(self.click_0_2)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 800, 913))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("2.png"))
        self.label_2.setObjectName("label_2")
        self.Registration_Login_lineEdit = QtWidgets.QLineEdit(self.page_2)
        self.Registration_Login_lineEdit.setGeometry(QtCore.QRect(350, 380, 381, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Registration_Login_lineEdit.setFont(font)
        self.Registration_Login_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"color: white;")
        self.Registration_Login_lineEdit.setText("")
        self.Registration_Login_lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.Registration_Login_lineEdit.setObjectName("Registration_Login_lineEdit")
        self.Registration_Password_lineEdit = QtWidgets.QLineEdit(self.page_2)
        self.Registration_Password_lineEdit.setGeometry(QtCore.QRect(460, 530, 271, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Registration_Password_lineEdit.setFont(font)
        self.Registration_Password_lineEdit.setAccessibleName("")
        self.Registration_Password_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"color:white;")
        self.Registration_Password_lineEdit.setText("")
        self.Registration_Password_lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.Registration_Password_lineEdit.setObjectName("Registration_Password_lineEdit")
        self.Registration_pushButton = QtWidgets.QPushButton(self.page_2)
        self.Registration_pushButton.setGeometry(QtCore.QRect(60, 700, 681, 71))
        self.Registration_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Registration_pushButton.setText("")
        self.Registration_pushButton.setObjectName("Registration_pushButton")
        self.Registration_pushButton.clicked.connect(self.registration)
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.label_3 = QtWidgets.QLabel(self.page_3)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 800, 913))
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("3.png"))
        self.label_3.setObjectName("label_3")
        self.Entry_Login_lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.Entry_Login_lineEdit.setGeometry(QtCore.QRect(350, 380, 381, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Entry_Login_lineEdit.setFont(font)
        self.Entry_Login_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"color: white;")
        self.Entry_Login_lineEdit.setText("")
        self.Entry_Login_lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.Entry_Login_lineEdit.setObjectName("Entry_Login_lineEdit")
        self.Entry_pushButton = QtWidgets.QPushButton(self.page_3)
        self.Entry_pushButton.setGeometry(QtCore.QRect(290, 690, 221, 61))
        self.Entry_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Entry_pushButton.setText("")
        self.Entry_pushButton.setObjectName("Entry_pushButton")
        self.Entry_pushButton.clicked.connect(self.entry)
        self.Entry_Password_lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.Entry_Password_lineEdit.setGeometry(QtCore.QRect(460, 530, 271, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Entry_Password_lineEdit.setFont(font)
        self.Entry_Password_lineEdit.setAccessibleName("")
        self.Entry_Password_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"color:white;")
        self.Entry_Password_lineEdit.setText("")
        self.Entry_Password_lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.Entry_Password_lineEdit.setObjectName("Entry_Password_lineEdit")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.label_4 = QtWidgets.QLabel(self.page_4)
        self.label_4.setGeometry(QtCore.QRect(0, 0, 800, 913))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("4.png"))
        self.label_4.setObjectName("label_4")
        self.Name_Task_lineEdit = QtWidgets.QLineEdit(self.page_4)
        self.Name_Task_lineEdit.setGeometry(QtCore.QRect(350, 240, 381, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Name_Task_lineEdit.setFont(font)
        self.Name_Task_lineEdit.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"color: black;")
        self.Name_Task_lineEdit.setText("")
        self.Name_Task_lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.Name_Task_lineEdit.setObjectName("Name_Task_lineEdit")
        self.dateEdit = QtWidgets.QDateEdit(self.page_4)
        self.dateEdit.setGeometry(QtCore.QRect(270, 330, 261, 31))
        self.dateEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.dateEdit.setDate(QtCore.QDate(2023, 1, 1))
        self.dateEdit.setObjectName("dateEdit")
        self.Add_Task_pushButton = QtWidgets.QPushButton(self.page_4)
        self.Add_Task_pushButton.setGeometry(QtCore.QRect(160, 400, 321, 51))
        self.Add_Task_pushButton.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;")
        self.Add_Task_pushButton.setText("")
        self.Add_Task_pushButton.setObjectName("Add_Task_pushButton")
        self.Add_Task_pushButton.clicked.connect(self.add_task)
        self.listWidget = QtWidgets.QListWidget(self.page_4)
        self.listWidget.setGeometry(QtCore.QRect(95, 515, 611, 303))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.listWidget.setFont(font)
        self.listWidget.setStyleSheet("background-color: rgba(0,0,0,0);\n"
"border: none;\n"
"color:white;\n"
"text-align: center;")
        self.listWidget.itemClicked.connect(self.on_task_clicked)
        self.listWidget.setDragEnabled(True)
        self.listWidget.setObjectName("listWidget")
        self.ONE_DAY_pushButton = QtWidgets.QPushButton(self.page_4)
        self.ONE_DAY_pushButton.setGeometry(QtCore.QRect(120, 470, 93, 28))
        self.ONE_DAY_pushButton.setStyleSheet("\n"
"color:black;")
        self.ONE_DAY_pushButton.setObjectName("ONE_DAY_pushButton")
        self.ONE_DAY_pushButton.clicked.connect(self.show_one_day_tasks)
        self.ALL_pushButton = QtWidgets.QPushButton(self.page_4)
        self.ALL_pushButton.setGeometry(QtCore.QRect(590, 470, 93, 28))
        self.ALL_pushButton.setObjectName("ALL_pushButton")
        self.ALL_pushButton.clicked.connect(self.display_tasks)
        self.ALL_pushButton.setStyleSheet("color:black")
        self.WEEK_pushButton = QtWidgets.QPushButton(self.page_4)
        self.WEEK_pushButton.setGeometry(QtCore.QRect(270, 470, 93, 28))
        self.WEEK_pushButton.setObjectName("WEEK_pushButton")
        self.WEEK_pushButton.clicked.connect(self.show_one_week_tasks)
        self.WEEK_pushButton.setStyleSheet("color:black")
        self.MONTH_pushButton = QtWidgets.QPushButton(self.page_4)
        self.MONTH_pushButton.setGeometry(QtCore.QRect(440, 470, 93, 28))
        self.MONTH_pushButton.setStyleSheet("color:black")
        self.MONTH_pushButton.setObjectName("MONTH_pushButton")
        self.MONTH_pushButton.clicked.connect(self.show_one_month_tasks)
        self.label_4.raise_()
        self.dateEdit.raise_()
        self.Name_Task_lineEdit.raise_()
        self.Add_Task_pushButton.raise_()
        self.listWidget.raise_()
        self.ONE_DAY_pushButton.raise_()
        self.ALL_pushButton.raise_()
        self.WEEK_pushButton.raise_()
        self.MONTH_pushButton.raise_()
        self.stackedWidget.addWidget(self.page_4)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ONE_DAY_pushButton.setText(_translate("MainWindow", "1 день"))
        self.ALL_pushButton.setText(_translate("MainWindow", "все"))
        self.WEEK_pushButton.setText(_translate("MainWindow", "неделя")) #установка текста 
        self.MONTH_pushButton.setText(_translate("MainWindow", "месяц"))

        # ФУНКЦИЯ ДЛЯ РЕГИСТРАЦИИ АККАУНТА

    def registration(self):
        con = sqlite3.connect('Ask_task.db')
        cur = con.cursor()
        a = self.Registration_Login_lineEdit.text()
        b = self.Registration_Password_lineEdit.text()
        query1 = f" INSERT INTO users (login,password) VALUES('{a}','{b}')"
        cur.execute(query1)
        con.commit()
        cur.close()
        con.close()

        self.stackedWidget.setCurrentIndex(3)  # регистрация пользователя
        self.display_tasks()

        # ФУНКЦИЯ ДЛЯ ВХОДА В АККАУНТ

    def entry(self):
        login = self.Entry_Login_lineEdit.text()
        password = self.Entry_Password_lineEdit.text()

        conn = sqlite3.connect('Ask_task.db')
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM users WHERE login=? AND password=?", (login, password))
        user = cursor.fetchone()

        if user:
            self.stackedWidget.setCurrentIndex(3)
            self.display_tasks()

        else:
            self.stackedWidget.setCurrentIndex(0)

        # ФУНКЦИЯ ДЛЯ ОТОБРАЖЕНИЯ ЗАДАЧИ В БД

    def display_tasks(self):
        self.listWidget.clear()
        login = self.Registration_Login_lineEdit.text() or self.Entry_Login_lineEdit.text()
        password = self.Registration_Password_lineEdit.text() or self.Entry_Password_lineEdit.text()
        con = sqlite3.connect('Ask_task.db')
        cur = con.cursor()
        cur.execute("SELECT id, name, deadline FROM task WHERE login=? AND password=? ORDER BY deadline ASC",
                    (login, password))
        tasks = cur.fetchall()
        for task in tasks:
            task_id = task[0]
            task_name = task[1]
            deadline = task[2]
            item = QtWidgets.QListWidgetItem(f"{task_name} - {deadline}")
            item.setData(Qt.UserRole, task_id)
            item.setTextAlignment(Qt.AlignCenter)
            self.listWidget.addItem(item)
        cur.close()
        con.close()

        # ФУНКЦИЯ ДЛЯ ДОБАВЛЕНИЯ ЗАДАЧИ В БД

    def add_task(self):
        name = self.Name_Task_lineEdit.text()
        deadline = self.dateEdit.date().toString("yyyy-MM-dd")

        login = self.Registration_Login_lineEdit.text() or self.Entry_Login_lineEdit.text()
        password = self.Registration_Password_lineEdit.text() or self.Entry_Password_lineEdit.text()

        con = sqlite3.connect('Ask_task.db')
        cur = con.cursor()
        cur.execute("INSERT INTO task ( name, deadline, login, password) VALUES (?, ?, ?, ?)",
                    (name, deadline, login, password))

        con.commit()

        self.display_tasks()

        # ФУНКЦИЯ ДЛЯ УДАЛЕНИЯ ЗАДАЧИ ИЗ БАЗЫ ДАННЫХ

    def on_task_clicked(self, item):
        task_id = item.data(Qt.UserRole)

        reply = QMessageBox.question(self.page_4, 'Предупреждение', 'Вы уверены, что хотите удалить эту заметку?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            conn = sqlite3.connect('Ask_task.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM task WHERE id = ?", (task_id,))
            conn.commit()

            cursor.close()
            conn.close()
            self.display_tasks()

    # ФУНЦИИ ПЕРЕКЛЮЧЕНИЯ МЕЖДУ СТРАНИЦАМИ
    def click_0_1(self, index):
        self.stackedWidget.setCurrentIndex(1)

    def click_0_2(self, index):
        self.stackedWidget.setCurrentIndex(2)

    # ФУНЦИЯ ДЛЯ ПОКАЗА ЗАМЕТОК НА ДЕНЬ
    def show_one_day_tasks(self):
        self.listWidget.clear()
        login = self.Registration_Login_lineEdit.text() or self.Entry_Login_lineEdit.text()
        password = self.Registration_Password_lineEdit.text() or self.Entry_Password_lineEdit.text()
        con = sqlite3.connect('Ask_task.db')
        cur = con.cursor()
        current_date = datetime.now().strftime('%Y-%m-%d')
        # выполняется SQL-запрос для получения задач из базы данных, используя логин и пароль пользователя и сегодняшнюю дату, определенную ранее.
        cur.execute(
            "SELECT id, name, deadline FROM task WHERE login=? AND password=? AND deadline=? ORDER BY deadline ASC",
            (login, password, current_date))
        tasks = cur.fetchall()
        # Затем функции проходят по списку задач и создают для каждой задачи QListWidgetItem, который отображается в listWidget. Для каждой задачи устанавливается task_id в качестве данных списка, чтобы можно было идентифицировать задачу при щелчке на ней в списке.
        for task in tasks:
            task_id = task[0]
            task_name = task[1]
            deadline = task[2]
            item = QtWidgets.QListWidgetItem(f"{task_name} - {deadline}")
            item.setData(Qt.UserRole, task_id)
            item.setTextAlignment(Qt.AlignCenter)
            self.listWidget.addItem(item)
        cur.close()
        con.close()

    # ФУНЦИЯ ДЛЯ ПОКАЗА ЗАМЕТОК НА НЕДЕЛЮ
    def show_one_week_tasks(self):
        self.listWidget.clear()
        login = self.Registration_Login_lineEdit.text() or self.Entry_Login_lineEdit.text()
        password = self.Registration_Password_lineEdit.text() or self.Entry_Password_lineEdit.text()

        con = sqlite3.connect('Ask_task.db')
        cur = con.cursor()

        # Определяем начальную и конечную дату для недели
        today = QDate.currentDate()
        start_of_week = today
        end_of_week = today.addDays(7)
        # выполняется SQL-запрос для получения задач из базы данных, используя логин и пароль пользователя и начальную и конечную даты, определенные ранее.
        cur.execute(
            "SELECT id, name, deadline FROM task WHERE login=? AND password=? AND deadline BETWEEN ? AND ? ORDER BY deadline ASC",
            (login, password, start_of_week.toString("yyyy-MM-dd"), end_of_week.toString("yyyy-MM-dd")))
        tasks = cur.fetchall()
        # Затем функции проходят по списку задач и создают для каждой задачи QListWidgetItem, который отображается в listWidget. Для каждой задачи устанавливается task_id в качестве данных списка, чтобы можно было идентифицировать задачу при щелчке на ней в списке.
        for task in tasks:
            task_id = task[0]
            task_name = task[1]
            deadline = task[2]
            item = QtWidgets.QListWidgetItem(f"{task_name} - {deadline}")
            item.setData(Qt.UserRole, task_id)
            item.setTextAlignment(Qt.AlignCenter)
            self.listWidget.addItem(item)

        cur.close()
        con.close()

    # ФУНЦИЯ ДЛЯ ПОКАЗА ЗАМЕТОК НА МЕСЯЦ
    def show_one_month_tasks(self):
        self.listWidget.clear()
        login = self.Registration_Login_lineEdit.text() or self.Entry_Login_lineEdit.text()
        password = self.Registration_Password_lineEdit.text() or self.Entry_Password_lineEdit.text()

        con = sqlite3.connect('Ask_task.db')
        cur = con.cursor()

        # Определяем начальную и конечную дату для месяца
        today = QDate.currentDate()
        start_of_month = today
        end_of_month = today.addDays(31)
        #выполняется SQL-запрос для получения задач из базы данных, используя логин и пароль пользователя и начальную и конечную даты, определенные ранее.
        cur.execute(
            "SELECT id, name, deadline FROM task WHERE login=? AND password=? AND deadline BETWEEN ? AND ? ORDER BY deadline ASC",
            (login, password, start_of_month.toString("yyyy-MM-dd"), end_of_month.toString("yyyy-MM-dd")))
        tasks = cur.fetchall()
        #Затем функции проходят по списку задач и создают для каждой задачи QListWidgetItem, который отображается в listWidget. Для каждой задачи устанавливается task_id в качестве данных списка, чтобы можно было идентифицировать задачу при щелчке на ней в списке.
        for task in tasks:
            task_id = task[0]
            task_name = task[1]
            deadline = task[2]
            item = QtWidgets.QListWidgetItem(f"{task_name} - {deadline}")
            item.setData(Qt.UserRole, task_id)
            item.setTextAlignment(Qt.AlignCenter)
            self.listWidget.addItem(item)

        cur.close()
        con.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
